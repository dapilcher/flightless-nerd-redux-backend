{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../componentBlocks.tsx", "../auth.ts", "../utils/getEnvVar.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport \"dotenv/config\";\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\n\nimport getEnvVar from \"./utils/getEnvVar\";\n\nexport default withAuth(\n  config({\n    server: {\n      cors: {\n        origin: [getEnvVar(\"FRONTEND_URL\")],\n        credentials: true,\n      },\n    },\n    db: {\n      provider: \"postgresql\",\n      url: getEnvVar(\"POSTGRES_URL\"),\n    },\n    lists,\n    session,\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from \"@keystone-6/core\";\nimport { allowAll } from \"@keystone-6/core/access\";\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  checkbox,\n  select,\n} from \"@keystone-6/core/fields\";\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from \"@keystone-6/fields-document\";\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from \".keystone/types\";\n\nimport { componentBlocks } from \"./componentBlocks\";\nimport { DateTime } from \"@keystone-6/core/dist/declarations/src/types/schema/graphql-ts-schema\";\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: \"unique\",\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      // we can use this field to see what Posts this User has authored\n      //   more on that in the Post list below\n      posts: relationship({ ref: \"Post.author\", many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" },\n      }),\n    },\n  }),\n\n  Post: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our Post list\n    fields: {\n      // with this field, you can set a User as the author for a Post\n      author: relationship({\n        // we could have used 'User', but then the relationship would only be 1-way\n        ref: \"User.posts\",\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          linkToItem: true,\n          inlineConnect: true,\n        },\n\n        // a Post can only have one author\n        //   this is the default, but we show it here for verbosity\n        many: false,\n      }),\n\n      // with this field, you can add some Tags to Posts\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: \"Tag.posts\",\n\n        // a Post can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: \"cards\",\n          cardFields: [\"name\"],\n          inlineEdit: { fields: [\"name\"] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: [\"name\"] },\n        },\n      }),\n      status: select({\n        options: [\"DRAFT\", \"PUBLISHED\"],\n        defaultValue: \"DRAFT\",\n      }),\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: \"now\" },\n        ui: {\n          createView: {\n            fieldMode: \"hidden\",\n          },\n          itemView: {\n            fieldPosition: \"sidebar\",\n            fieldMode: \"read\",\n          },\n        },\n      }),\n      updatedAt: timestamp({\n        ui: {\n          createView: {\n            fieldMode: \"hidden\",\n          },\n          itemView: {\n            fieldPosition: \"sidebar\",\n            fieldMode: \"read\",\n          },\n        },\n      }),\n      publishedAt: timestamp({\n        ui: {\n          createView: {\n            fieldMode: \"hidden\",\n          },\n          // update to only display if not null\n          itemView: {\n            fieldPosition: \"sidebar\",\n            fieldMode: \"read\",\n          },\n        },\n      }),\n      title: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n        ui: {\n          views: \"./componentBlocks\",\n        },\n        componentBlocks,\n      }),\n    },\n    hooks: {\n      resolveInput: ({ operation, inputData, resolvedData }) => {\n        let returnData = { ...resolvedData };\n\n        // update updatedAt field for every update\n        returnData.updatedAt = new Date(Date.now());\n\n        if (inputData.status === \"PUBLISHED\" && !inputData.publishedAt) {\n          returnData.publishedAt = new Date(Date.now());\n        }\n        return returnData;\n      },\n    },\n  }),\n\n  // this last list is our Tag list, it only has a name field for now\n  Tag: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: true,\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Posts associated with a Tag\n      posts: relationship({ ref: \"Post.tags\", many: true }),\n    },\n  }),\n};\n", "import React from 'react';\nimport { NotEditable, component, fields } from '@keystone-6/fields-document/component-blocks';\n\n// naming the export componentBlocks is important because the Admin UI\n// expects to find the components like on the componentBlocks export\nexport const componentBlocks = {\n  quote: component({\n    preview: (props) => {\n      return (\n        <div\n          style={{\n            background: '#ecf0f4',\n            padding: 16,\n            borderRadius: 8,\n            margin: 0,\n          }}\n        >\n          <div style={{ fontStyle: 'italic', color: '#4A5568', margin: 0, padding: 0 }}>{props.fields.content.element}</div>\n          <div style={{ fontWeight: 'bold', color: '#718096', margin: 0, padding: 0 }}>\n            <NotEditable>\u2014 </NotEditable>\n            {props.fields.attribution.element}\n          </div>\n        </div>\n      );\n    },\n    label: 'Quote',\n    schema: {\n      content: fields.child({\n        kind: 'block',\n        placeholder: 'Quote...',\n        formatting: { inlineMarks: 'inherit', softBreaks: 'inherit' },\n        links: 'inherit',\n      }),\n      attribution: fields.child({ kind: 'inline', placeholder: 'Attribution...' }),\n    },\n    chromeless: true,\n  }),\n};", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n", "export default function getEnvVar(v: string): string {\n  const ret = process.env[v];\n  if (ret === undefined) {\n    throw new Error(\"process.env.\" + v + \" is undefined!\");\n  }\n  return ret;\n}\n"],
  "mappings": "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",
  "names": ["import_core"]
}
